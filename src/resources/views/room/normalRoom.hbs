<link rel="stylesheet" href="../css/chessboard-1.0.0.css">
<link rel="stylesheet" href="../css/tab.css">
<script src="../js/stockfish6.js"></script>
<style>
    #bar_eval {
        position: relative;
        width: 25px;
        height: 400px;
        background-color: rgb(127, 127, 127);
    }

    #bar_fill {
        position: absolute;
        bottom: 0;
        width: 100%;
        height: 50%;
        background-color: #ccc;
        transition: all 0.5s;
    }

    #container_game {
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>
<div id="main__layout">
    <div class="main__layout__item">
        <div id="chess__board">
            <div id="container_game">
                <div id="board" style="width: 400px"></div>
                <div id="bar_eval">
                    <div id="bar_fill"></div>
                </div>
            </div>
        </div>
    </div>
    <div class="main__layout__item">
        <div id="container__tab" class="container">
            <div class="card__tab tabs">
                <input id="tab-1" type="radio" class="tab tab-selector" checked="checked" name="tab" />
                <label for="tab-1" class="tab tab-primary">Chat</label>
                <input id="tab-2" type="radio" class="tab tab-selector" name="tab" />
                <label for="tab-2" class="tab tab-success">History</label>
                <input id="tab-3" type="radio" class="tab tab-selector" name="tab" />
                <label for="tab-3" class="tab tab-default">Participants</label>
                <input id="tab-4" type="radio" class="tab tab-selector" name="tab" />
                <label for="tab-4" class="tab tab-warning">Setting</label>
                <i id="close__tab__icon" class="far fa-times-circle"></i>
                <section class="content">
                    <div class="item" id="chat">
                        <div id="show__message__chat">
                            <span class="player__message">
                                <img class="player__message-avatar"
                                    src="https://cdn.openart.ai/published/dKOb2q4NHzOorebxhOHn/d35TtG9A_tbbO_1024.webp"
                                    alt="">
                                <span class="player__message-name">Player_Name</span>
                                <span class="player__message-elo">1200</span>
                                <span class="player__message-text">Hello</span>
                            </span>
                            <span class="player__message">
                                <img class="player__message-avatar"
                                    src="https://cdn.openart.ai/published/dKOb2q4NHzOorebxhOHn/d35TtG9A_tbbO_1024.webp"
                                    alt="">
                                <span class="player__message-name">Player_Name</span>
                                <span class="player__message-elo">1200</span>
                                <span class="player__message-text">Lorem ipsum dolor, sit amet consectetur
                                    adipisicing elit.
                                    Beatae nobis quam nemo a veniam possimus obcaecati repellat eius. Rerum
                                    officia labore
                                    animi
                                    fugit asperiores qui illo eveniet magnam tempora deserunt.</span>
                            </span>
                            <span class="join__left__message">
                                <span class="join__left__message-text">Player_Name left the room</span>
                            </span>

                            <div id="chat__input">
                                <input type="text" id="chat__input-text" placeholder="Type a message">
                                <i id="chat__input-send" class="fas fa-paper-plane"></i>
                            </div>
                        </div>
                    </div>
                    <div class="item" id="history">
                        <table id="history_moves">
                            <tr>
                                <th>Side</th>
                                <th>Move</th>
                            </tr>
                            <tr>
                                <td>Trung</td>
                                <td>e2-e3</td>
                            </tr>
                            <tr>
                                <td>Chun</td>
                                <td>f3-g5</td>
                            </tr>
                            <tr>
                                <td>Trung</td>
                                <td>e2-e8</td>
                            </tr>
                            <tr>
                                <td>Trung</td>
                                <td>e2-e3</td>
                            </tr>
                            <tr>
                                <td>Chun</td>
                                <td>f3-g5</td>
                            </tr>
                            <tr>
                                <td>Trung</td>
                                <td>e2-e8</td>
                            </tr>
                            <tr>
                                <td>Trung</td>
                                <td>e2-e3</td>
                            </tr>
                            <tr>
                                <td>Chun</td>
                                <td>f3-g5</td>
                            </tr>
                            <tr>
                                <td>Trung</td>
                                <td>e2-e8</td>
                            </tr>
                        </table>
                    </div>
                    <div class="item" id="participants">
                        <table id="list__participants">
                            <tr>
                                <td>
                                    <span class="player__message">
                                        <img class="player__message-avatar"
                                            src="https://cdn.openart.ai/published/dKOb2q4NHzOorebxhOHn/d35TtG9A_tbbO_1024.webp"
                                            alt="">
                                        <span class="player__message-name">Player_Name</span>
                                        <span class="player__message-elo">1200</span>
                                    </span>
                                </td>
                                <td>
                                    <i class="fas fa-globe-americas"></i>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span class="player__message">
                                        <img class="player__message-avatar"
                                            src="https://cdn.openart.ai/published/dKOb2q4NHzOorebxhOHn/d35TtG9A_tbbO_1024.webp"
                                            alt="">
                                        <span class="player__message-name">Player_Name</span>
                                        <span class="player__message-elo">1200</span>
                                    </span>
                                </td>
                                <td>
                                    <i class="fas fa-globe-americas"></i>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span class="player__message">
                                        <img class="player__message-avatar"
                                            src="https://cdn.openart.ai/published/dKOb2q4NHzOorebxhOHn/d35TtG9A_tbbO_1024.webp"
                                            alt="">
                                        <span class="player__message-name">Player_Name</span>
                                        <span class="player__message-elo">1200</span>
                                    </span>
                                </td>
                                <td>
                                    <i class="fas fa-globe-americas"></i>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span class="player__message">
                                        <img class="player__message-avatar"
                                            src="https://cdn.openart.ai/published/dKOb2q4NHzOorebxhOHn/d35TtG9A_tbbO_1024.webp"
                                            alt="">
                                        <span class="player__message-name">Player_Name</span>
                                        <span class="player__message-elo">1200</span>
                                    </span>
                                </td>
                                <td>
                                    <i class="fas fa-globe-americas"></i>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span class="player__message">
                                        <img class="player__message-avatar"
                                            src="https://cdn.openart.ai/published/dKOb2q4NHzOorebxhOHn/d35TtG9A_tbbO_1024.webp"
                                            alt="">
                                        <span class="player__message-name">Player_Name</span>
                                        <span class="player__message-elo">1200</span>
                                    </span>
                                </td>
                                <td>
                                    <i class="fas fa-globe-americas"></i>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span class="player__message">
                                        <img class="player__message-avatar"
                                            src="https://cdn.openart.ai/published/dKOb2q4NHzOorebxhOHn/d35TtG9A_tbbO_1024.webp"
                                            alt="">
                                        <span class="player__message-name">Player_Name</span>
                                        <span class="player__message-elo">1200</span>
                                    </span>
                                </td>
                                <td>
                                    <i class="fas fa-globe-americas"></i>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span class="player__message">
                                        <img class="player__message-avatar"
                                            src="https://cdn.openart.ai/published/dKOb2q4NHzOorebxhOHn/d35TtG9A_tbbO_1024.webp"
                                            alt="">
                                        <span class="player__message-name">Player_Name</span>
                                        <span class="player__message-elo">1200</span>
                                    </span>
                                </td>
                                <td>
                                    <i class="fas fa-globe-americas"></i>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span class="player__message">
                                        <img class="player__message-avatar"
                                            src="https://cdn.openart.ai/published/dKOb2q4NHzOorebxhOHn/d35TtG9A_tbbO_1024.webp"
                                            alt="">
                                        <span class="player__message-name">Player_Name</span>
                                        <span class="player__message-elo">1200</span>
                                    </span>
                                </td>
                                <td>
                                    <i class="fas fa-globe-americas"></i>
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    <span class="player__message">
                                        <img class="player__message-avatar"
                                            src="https://cdn.openart.ai/published/dKOb2q4NHzOorebxhOHn/d35TtG9A_tbbO_1024.webp"
                                            alt="">
                                        <span class="player__message-name">Player_Name</span>
                                        <span class="player__message-elo">1200</span>
                                    </span>
                                </td>
                                <td>
                                    <i class="fas fa-globe-americas"></i>
                                </td>
                            </tr>
                        </table>
                    </div>
                    <div class="item" id="settings">
                        <div id="list__settings">
                            <div id="choose__frist__turn">
                                <p class="option__title">
                                    <span class="option__title-text">FIRST TURN</span>
                                </p>
                                <div class="radio-input">
                                    <label class="label">
                                        <input type="radio" id="value-1" checked="" name="value-radio"
                                            value="value-1" />
                                        <span class="text__side">White</span>
                                    </label>
                                    <label class="label">
                                        <input type="radio" id="value-2" name="value-radio" value="value-2" />
                                        <span class="text__side">Black</span>
                                    </label>
                                    <label class="label">
                                        <input type="radio" id="value-3" name="value-radio" value="value-3" />
                                        <span class="text__side">Alternate</span>
                                    </label>
                                </div>
                            </div>

                            <div id="choose__time__control">
                                <p class="option__title">
                                    <span class="option__title-text">TIME</span>
                                </p>
                                <div id="choose__opt__time">
                                    <div class="total__time">
                                        <span class="total__time-label">Total time: </span>
                                        <div class="select__total" tabindex="1">
                                            <input class="selectopt__total" name="total__time" type="radio" id="opt1"
                                                checked>
                                            <label for="opt1" class="option__total">15m</label>
                                            <input class="selectopt__total" name="total__time" type="radio" id="opt2">
                                            <label for="opt2" class="option__total">20m</label>
                                            <input class="selectopt__total" name="total__time" type="radio" id="opt3">
                                            <label for="opt3" class="option__total">30m</label>
                                            <input class="selectopt__total" name="total__time" type="radio" id="opt4">
                                            <label for="opt4" class="option__total">60m</label>
                                            <input class="selectopt__total" name="total__time" type="radio" id="opt5">
                                            <label for="opt5" class="option__total">120m</label>
                                        </div>
                                    </div>
                                    <div class="total__time">
                                        <span class="total__time-label">Plus time: </span>
                                        <div class="select__plus" tabindex="2">
                                            <input class="selectopt__plus" name="plus__time" type="radio" id="opt11"
                                                checked>
                                            <label for="opt11" class="option__plus">15s</label>
                                            <input class="selectopt__plus" name="plus__time" type="radio" id="opt21">
                                            <label for="opt21" class="option__plus">20s</label>
                                            <input class="selectopt__plus" name="plus__time" type="radio" id="opt31">
                                            <label for="opt31" class="option__plus">30s</label>
                                            <input class="selectopt__plus" name="plus__time" type="radio" id="opt41">
                                            <label for="opt41" class="option__plus">60s</label>
                                            <input class="selectopt__plus" name="plus__time" type="radio" id="opt51">
                                            <label for="opt51" class="option__plus">120s</label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div id="options__tool">
                                <p class="option__title">
                                    <span class="option__title-text">TOOLS</span>
                                </p>
                                <div id="list__tools">
                                    <div id="tool__container">
                                        <span>Evaluation bar</span>
                                        <label class="container__tool__checkbox">
                                            <input type="checkbox" checked>
                                            <svg viewBox="0 0 64 64" height="1.2em" width="1.2em">
                                                <path
                                                    d="M 0 16 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 16 L 32 48 L 64 16 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 16"
                                                    pathLength="575.0541381835938" class="path"></path>
                                            </svg>
                                        </label>
                                    </div>
                                    <div id="tool__container">
                                        <span>Taking back move</span>
                                        <label class="container__tool__checkbox">
                                            <input type="checkbox">
                                            <svg viewBox="0 0 64 64" height="1.2em" width="1.2em">
                                                <path
                                                    d="M 0 16 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 16 L 32 48 L 64 16 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 16"
                                                    pathLength="575.0541381835938" class="path"></path>
                                            </svg>
                                        </label>
                                    </div>
                                    <div id="tool__container">
                                        <span>Sound</span>
                                        <label class="container__tool__checkbox">
                                            <input type="checkbox" checked>
                                            <svg viewBox="0 0 64 64" height="1.2em" width="1.2em">
                                                <path
                                                    d="M 0 16 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 16 L 32 48 L 64 16 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 16"
                                                    pathLength="575.0541381835938" class="path"></path>
                                            </svg>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
    <div id="menu__show" class="hidden__animation">
        <i id="menu__show-icon" class="fas fa-bars"></i>
    </div>
</div>
<p>
    White player:
    <span id="White" data-user_id="">

    </span>
    <span id="timeWhiteSide">10.00.0</span>
</p>

<p>
    Black player:
    <span id="Black" data-user_id="">

    </span>
    <span id="timeBlackSide">10.00.0</span>
</p>
<div id="start__game">

</div>
<div id="options__game">

</div>

<div id="message__room">

</div>
<span id="fen_string_start" data-fenString=""></span>


<script src="/socket.io/socket.io.js"></script>

<script>
    const socket = io();
    var timeinterval = null;
    setTimeout(() => {
        socket.emit("join", "{{room._id}}", "{{user._id}}", "{{user.username}}", "{{room.white_player._id}}", "{{room.black_player._id}}", "{{room.host_room}}");
    }, 100);

    function settingJoin() {
        $(".btn__join").click(function () {
            const player = $(this).data("player");
            socket.emit("join__normal__room", player, "{{room._id}}", "{{user._id}}", socket.id);
        });
    }

    function settingKick() {
        $(".btn__kick").click(function () {
            const user_id = $(this).data("player");
            console.log(user_id);
            socket.emit("kick__normal__room", "{{room._id}}", user_id);
        });
    }

    function settingStart() {
        $("#start__game__btn").click(function () {
            const white_player = $("#White").attr("data-user_id");
            const black_player = $("#Black").attr("data-user_id");
            const time_white_side = $("#timeWhiteSide").text();
            const time_black_side = $("#timeBlackSide").text();
            socket.emit("start__game", "{{room._id}}", white_player, black_player, time_white_side, time_black_side);
        });
    }

    function milliseconds2Time(mls) {
        const minutes = Math.floor(mls / 60000);
        const seconds = Math.floor((mls % 60000) / 1000);
        const milliseconds = Math.floor((mls % 1000) / 100);
        return minutes.toString().padStart(2, "0") + "." + seconds.toString().padStart(2, "0") + "." + milliseconds.toString().padStart(1, "0");
    }

    function time2Milliseconds(t) {
        const time = t.split(".");
        return parseInt(time[0]) * 60 * 1000 + parseInt(time[1]) * 1000 + parseInt(time[2]) * 100;
    }

    function CountdownHandle(side) {
        const time = $("#time" + side + "Side").text();
        countdowntime = time2Milliseconds(time);
        timeinterval = setInterval(() => {
            countdowntime -= 100;
            const newTime = milliseconds2Time(countdowntime);
            $("#time" + side + "Side").text(newTime);
            if (countdowntime <= 0) {
                clearInterval(timeinterval);
                socket.emit("countdownEvent", "{{room._id}}", side);
            }
        }, 100);
    }

    function settingFlip() {
        $("#flipOrientationBtn").click(function () {
            board.flip();
            view_side = view_side === "White" ? "Black" : "White";
        });
    }

    function handleJoinNormalRoom(player, player__name, player_id, host_user_id) {
        if (player === "White") {
            if (host_user_id === player_id) {
                $("#White").html(player__name + " (host)");
            }
            else {
                $("#White").html(player__name);
            }
            $("#White").attr("data-user_id", player_id);
        }
        if (player === "Black") {
            if (host_user_id === player_id) {
                $("#Black").html(player__name + " (host)");
            }
            else {
                $("#Black").html(player__name);
            }
            $("#Black").attr("data-user_id", player_id);
        }
    }

    function handleUserOut(player) {
        $("#" + player).html("<button class='btn__join' data-player='" + player + "'>join</button>");
        $("#" + player).attr("data-user_id", "");
        settingJoin();
    }

    function handleUserConnect(player, player__name, player_id, is_host_room) {
        if (is_host_room) {
            $("#" + player).html(player__name + " (host)");
        } else {
            $("#" + player).html(player__name);
        }
        $("#" + player).attr("data-user_id", player_id);
    }

    function handlehostChange(new_host) {
        if ($("#White").attr("data-user_id") === new_host) {
            $("#White").html($("#White").html() + " (host)");
        }
        if ($("#Black").attr("data-user_id") === new_host) {
            $("#Black").html($("#Black").html() + " (host)");
        }
    }

    function leaseMessage(message) {
        $("#message__room").append(`<p style = "text-align: center">${message}</p>`)
    }

    function settingTime(time, side) {
        const format_time = milliseconds2Time(time);
        $("#time" + side + "Side").text(format_time);
    }

    function addBtnKick(side) {
        $("#" + side).append("<button class='btn__kick' data-player='" + $("#" + side).attr("data-user_id") + "'>kick</button>");
        settingKick();
    }

    function removeBtnKick(side) {
        $("#" + side + " .btn__kick").remove();
    }

    function addBtnStart() {
        $("#start__game").html("<button id='start__game__btn'>start game</button>");
        settingStart();
    }

    function removeBtnStart() {
        $("#start__game").html("");
    }

    function determineSideByEqual(target_id) {
        if ($("#White").attr("data-user_id") === target_id) {
            return "White";
        }
        if ($("#Black").attr("data-user_id") === target_id) {
            return "Black";
        }
        return null
    }

    function determineSideByInequal(target_id) {
        if ($("#White").attr("data-user_id") !== target_id && $("#White").attr("data-user_id")) {
            return "White";
        }
        if ($("#Black").attr("data-user_id") !== target_id && $("#Black").attr("data-user_id")) {
            return "Black";
        }
        return null
    }

    function addHostRole(host_user_id) {
        const side = determineSideByInequal(host_user_id);
        addBtnKick(side);
        if (side) {
            addBtnStart();
        }
    }

    function settingUpGame(side_control) {
        const board_side = side_control === "White" ? "white" : "black";
        control = side_control;
        board.orientation(board_side);

        if (side_control === "Viewer") {
            settingOptionGame();
        }
        gameStart = true;
        var fen__string__start = $("#fen_string_start").data("fenString");
        if (!fen__string__start) {
            fen__string__start = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
        }
        settingPosition(fen__string__start);


        const kickId = $(".btn__kick").data("player");
        const sideOfKick = determineSideByEqual(kickId);
        removeBtnKick(sideOfKick);
        removeBtnStart();
    }

    function settingOptionGame() {
        $("#options__game").html("<button id='flipOrientationBtn'>Flip orientation</button>");
        settingFlip();
    }

    socket.on("join__normal__room", (player, player__name, player_id, host_user_id) => {
        handleJoinNormalRoom(player, player__name, player_id, host_user_id);
    });

    socket.on("user_disconnect", (user_id, user_name, host_room, host_change) => {
        const side = determineSideByEqual(user_id);
        if (side) {
            handleUserOut(side);
        }
        if (host_change) {
            handlehostChange(host_room);
        }
        leaseMessage(user_name + " left");
    });

    socket.on("user_connect-io", (user_id, user_name, room, host_room) => {
        leaseMessage(user_name + " join");
    })

    socket.on("user_connect-socket", (user_id, user_name, room, host_room, time_white_side_milisecond, time_black_side_milisecond, turn) => {
        if (room.white_player) {
            if (room.white_player._id == host_room) {
                handleUserConnect("White", room.white_player.username, room.white_player._id, true);
            }
            else {
                handleUserConnect("White", room.white_player.username, room.white_player._id, false);
            }
        }
        else {
            handleUserOut("White");
        }
        if (room.black_player) {
            if (room.black_player._id == host_room) {
                handleUserConnect("Black", room.black_player.username, room.black_player._id, true);
            }
            else {
                handleUserConnect("Black", room.black_player.username, room.black_player._id, false);
            }
        }
        else {
            handleUserOut("Black");
        }
        if (time_black_side_milisecond) {
            settingTime(time_black_side_milisecond, "Black");
        }
        if (time_white_side_milisecond) {
            settingTime(time_white_side_milisecond, "White");
        }
    })

    socket.on("add_role_of_host", (host_role, host_user_id) => {
        if (host_role) {
            addHostRole(host_user_id);
        }
    });

    socket.on("closeButtonStart", (host_user_id) => {
        removeBtnStart();
    });

    socket.on("start__game", (side_control) => {
        settingUpGame(side_control);
    });

    socket.on("countdownEvent", (turn) => {
        CountdownHandle(turn);
    });

    socket.on("kick__normal__room", user_name => {
        window.location.href = "/normalMatch";
    });

    function settingPosition(fen__string) {
        board.position(fen__string);
        game.load(fen__string);
        updateStatus();
    }

    function tryClearInterval(nameInterval) {
        console.log(nameInterval);
        try {
            clearInterval(nameInterval);
        } catch (e) {
            console.log(e);
        }
    }

    function makeEvalution() {
        window.setTimeout(() => {
            if (game.in_checkmate() || game.in_draw()) return;
            stockfish.postMessage(`position fen ${game.fen()}`);
            stockfish.postMessage(`go depth ${depth}`);
        }, 50);
    }

    function settingTimeAndHandleCountdown(new_turn, time_milisecond) {
        const old_turn = new_turn === "White" ? "Black" : "White";
        settingTime(time_milisecond, old_turn);
        CountdownHandle(new_turn);
    }

    socket.on("new__move", (fen__string, new_turn, milliseconds) => {
        settingPosition(fen__string);
        tryClearInterval(timeinterval);
        makeEvalution();
        settingTimeAndHandleCountdown(new_turn, milliseconds);
    });

    function handleGameOver(result, winner) {
        if (result === "checkmate") {
            alert(winner + " win");
        }
        if (result === "draw") {
            alert("Draw");
        }
        setTimeout(() => {
            tryClearInterval(timeinterval);
            settingTime(600000, "White");
            settingTime(600000, "Black");
        }, 100);
    }

    socket.on("game_over", (result, winner) => {
        handleGameOver(result, winner);
    });

    socket.on("go_to_start_mode", (host_user_id) => {
        setTimeout(() => {
            const side = determineSideByInequal(host_user_id);
            console.log(side, host_user_id);
            if (side) {
                addBtnKick(side);
                addBtnStart();
            }

        }, 100);
    });
</script>

<script>
    let shouldPrompt = false;

    if ("{{user._id}}" === $("#Black").attr("data-user_id") || "{{user._id}}" === $("#White").attr("data-user_id")) {
        shouldPrompt = true;
    }

    window.addEventListener('beforeunload', function (event) {
        if (shouldPrompt) {
            event.preventDefault();
            event.returnValue = '';
        }
    });

</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"
    integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.js"
    integrity="sha512-oprzqYFJfo4Bx/nNEcSI0xo7ggJrLc+qQ6hrS3zV/Jn0C4dsg4gu+FXW/Vm0jP9CrV7e5e6dcLUYkg3imjfjbw=="
    crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://unpkg.com/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.js"
    integrity="sha384-8Vi8VHwn3vjQ9eUHUxex3JSN/NFqUg3QbPyX8kWyb93+8AC/pPWTzj+nHtbC5bxD"
    crossorigin="anonymous"></script>
<script>
    var board = null;
    var game = new Chess();
    var $status = $("#status");
    var $fen = $("#fen");
    var $pgn = $("#pgn");
    const depth = 10;
    var control = "Viewer";
    var view_side = "White";
    var gameStart = false;

    function onDragStart(source, piece, position, orientation) {
        // do not pick up pieces if the game is over
        if (game.game_over()) return false;

        if (control === "Viewer") {
            return false;
        }
        if (control === "White" && gameStart) {
            if (piece.search(/^b/) !== -1) return false;
        }
        if (control === "Black" && gameStart) {
            if (piece.search(/^w/) !== -1) return false;
        }
    }

    function onDrop(source, target) {
        // check promotion
        var piece = game.get(source);
        var promotion;
        if (piece.type === "p" && (target[1] === "8" || target[1] === "1")) {
            // ask for promotion piece
            promotion = prompt("Promotion", "q");
            //game.move({ from: source, to: target, promotion: promotion });

        }
        // see if the move is legal
        var move = game.move({
            from: source,
            to: target,
            promotion: promotion,
        });

        if (game.game_over()) {
            const result = game.in_checkmate() ? "checkmate" : "draw";
            const winner = game.turn() === "w" ? "Black" : "White";
            socket.emit("game_over", "{{room._id}}", result, winner);
        }

        // illegal move
        if (move === null) return "snapback";

        const turn = game.turn() === "w" ? "Black" : "White";
        const countdown_time = $("#time" + turn + "Side").text();
        const countdownTime_milisecond = time2Milliseconds(countdown_time);
        socket.emit("player_move", "{{room._id}}", game.fen(), turn, countdownTime_milisecond);
        try {
            clearInterval(timeinterval);
        }
        catch (e) {
            console.log(e);
        }
        window.setTimeout(() => {
            if (game.in_checkmate() || game.in_draw()) return;
            stockfish.postMessage(`position fen ${game.fen()}`);
            stockfish.postMessage(`go depth ${depth}`);
        }, 50);
    }

    function onSnapEnd() {
        board.position(game.fen());

    }

    function updateStatus() {
        var status = "";

        var moveColor = "White";
        if (game.turn() === "b") {
            moveColor = "Black";
        }

        // checkmate?
        if (game.in_checkmate()) {
            status = "Game over, " + moveColor + " is in checkmate.";
        }

        // draw?
        else if (game.in_draw()) {
            status = "Game over, drawn position";
        }

        // game still on
        else {
            status = moveColor + " to move";

            // check?
            if (game.in_check()) {
                status += ", " + moveColor + " is in check";
            }
        }

        $status.html(status);
        $fen.html(game.fen());
        $pgn.html(game.pgn());
    }

    var config = {
        draggable: true,
        position: "start",
        onDragStart: onDragStart,
        onDrop: onDrop,
        onSnapEnd: onSnapEnd,
    };
    board = Chessboard("board", config);

    var stockfish = STOCKFISH();

    stockfish.onmessage = function (event) {
        const message = event.data ? event.data : event;
        console.log(message);
        if (message.startsWith("info depth")) {
            const parts = message.split(' ');
            const evalIndex = parts.indexOf("score") + 2;
            var evaluation = parts[evalIndex];
            const status = parts[evalIndex - 1];
            if (status == "mate") {
                evaluation = evaluation < 0 ? -10000 : 10000;
            }
            if (control === "White" && game.turn() === "w") {
                evaluation = -evaluation;
            }
            if (control === "Black" && game.turn() === "b") {
                evaluation = -evaluation;
            }
            if (control === "Viewer") {
                if (view_side === "Black" && game.turn() === "w") {
                    evaluation = -evaluation;
                }
                if (view_side === "White" && game.turn() === "b") {
                    evaluation = -evaluation;
                }
                evaluation = evaluation;
            }
            console.log(evaluation);
            evaluation /= 1000;

            $("#bar_fill").css("height", `${100 / (1 + Math.pow(5, 2 * evaluation))}%`);
        }
    };
</script>
<script>
    const mainLayOutItem = $(".main__layout__item");
    const tab = $("container__tab");
    const closeTab = $("#close__tab__icon");
    const menuShow = $("#menu__show");
    const chessBoard = $("#chess__board");
    closeTab.on("click", () => {
        console.log("close");
        tab.addClass("hidden__animation");
        chessBoard.addClass("zoom__in__chessboard");
        setTimeout(() => {
            mainLayOutItem[1].style.width = "0%";
            mainLayOutItem[0].style.width = "100%";
        }, 10);
        menuShow.removeClass("hidden__animation");
    });

    menuShow.on("click", () => {
        console.log("open");
        mainLayOutItem[1].style.display = "flex";
        chessBoard.removeClass("zoom__in__chessboard");
        setTimeout(() => {
            tab.removeClass("hidden__animation");
            mainLayOutItem[1].style.width = "50%";
            mainLayOutItem[0].style.width = "50%";
        }, 10);
        menuShow.addClass("hidden__animation");
    });
</script>