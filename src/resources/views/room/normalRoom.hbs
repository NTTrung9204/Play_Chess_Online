<link rel="stylesheet" href="../css/chessboard-1.0.0.css">
<style>
    #bar_eval{
    position: relative;
    width: 25px;
    height: 400px;
    background-color: rgb(127, 127, 127);
}

    #bar_fill{
        position: absolute;
        bottom: 0;
        width: 100%;
        height: 50%;
        background-color: #ccc;
        transition: all 0.5s;
    }

    #container_game{
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>
<p>
    White player: 
    <span id="White" data-user_id="">

    </span>
</p>

<p>
    Black player: 
    <span id="Black" data-user_id="">

    </span>
</p>
    <div id="container_game">
        <div id="board" style="width: 400px"></div>
        <div id="bar_eval">
            <div id="bar_fill"></div>
        </div>
    </div>
<div id="message__room">

</div>

<script src="/socket.io/socket.io.js"></script>

<script>
    const socket = io();
    setTimeout(() => {
        socket.emit("join", "{{room._id}}", "{{user._id}}", "{{user.username}}", "{{room.white_player._id}}", "{{room.black_player._id}}", "{{room.host_room}}");
    }, 100);

    function settingJoin() {
        $(".btn__join").click(function () {
            const player = $(this).data("player");
            socket.emit("join__normal__room", player, "{{room._id}}", "{{user._id}}", socket.id);
        });
    }

    function settingKick() {
        $(".btn__kick").click(function () {
            const user_id = $(this).data("player");
            console.log(user_id);
            socket.emit("kick__normal__room", "{{room._id}}", user_id);
        });
    }

    socket.on("join__normal__room", (player, player__name, player_id, host_user_id) => {
        if (player === "White") {
            if(host_user_id === player_id){
                $("#White").html(player__name + " (host)");
            }
            else{
                $("#White").html(player__name);
            }
            $("#White").attr("data-user_id", player_id);
        }
        if (player === "Black") {
            if(host_user_id === player_id){
                $("#Black").html(player__name + " (host)");
            }
            else{
                $("#Black").html(player__name);
            }
            $("#Black").attr("data-user_id", player_id);
        }
    });

    socket.on("user_disconnect", (user_id, user_name, host_room, host_change) => {
        if ($("#White").attr("data-user_id") === user_id) {
            $("#White").html("<button class='btn__join' data-player='White'>join</button>");
            $("#White").attr("data-user_id", "");
            settingJoin()
        }
        if ($("#Black").attr("data-user_id") === user_id) {
            $("#Black").html("<button class='btn__join' data-player='Black'>join</button>");
            $("#Black").attr("data-user_id", "");
            settingJoin()
        }
        if(host_change){
            if(host_room == $("#White").attr("data-user_id")){
                $("#White").html($("#White").html() + " (host)");
            }
            if(host_room == $("#Black").attr("data-user_id")){
                $("#Black").html($("#Black").html() + " (host)");
            }
        }
        $("#message__room").append(`<p style = "text-align: center">${user_name} left room</p>`)
    });

    socket.on("user_connect-io", (user_id, user_name, room, host_room) =>{
        $("#message__room").append(`<p style = "text-align: center">${user_name} joined</p>`)
    })

    socket.on("user_connect-socket", (user_id, user_name, room, host_room) =>{
        if(room.white_player){
            if(room.white_player._id == host_room){
                $("#White").html(room.white_player.username + " (host)");
                $("#White").attr("data-user_id", room.white_player._id);
            }
            else{
                $("#White").html(room.white_player.username);
                $("#White").attr("data-user_id", room.white_player._id);
            }
        }
        else{
            $("#White").html("<button class='btn__join' data-player='White'>join</button>");
            $("#White").attr("data-user_id", "");
            settingJoin()
        }
        if(room.black_player){
            if(room.black_player._id == host_room){
                $("#Black").html(room.black_player.username + " (host)");
                $("#Black").attr("data-user_id", room.black_player._id);
            }
            else{
                $("#Black").html(room.black_player.username);
                $("#Black").attr("data-user_id", room.black_player._id);
            }
        }
        else{
            $("#Black").html("<button class='btn__join' data-player='Black'>join</button>");
            $("#Black").attr("data-user_id", "");
            settingJoin()
        }
    })

    socket.on("add_role_of_host", (host_role, host_user_id) => {
        if(host_role){
            if($("#White").attr("data-user_id")){
                if($("#White").attr("data-user_id") != host_user_id){
                    $("#White").append("<button class='btn__kick' data-player='" + $("#White").attr("data-user_id") + "'>kick</button>");
                    settingKick()
                }
            }
            if($("#Black").attr("data-user_id")){
                if($("#Black").attr("data-user_id") != host_user_id){
                    $("#Black").append("<button class='btn__kick' data-player='" + $("#Black").attr("data-user_id") + "'>kick</button>");
                    settingKick()
                }
            }
        }
    });

    socket.on("kick__normal__room", user_name => {
        window.location.href = "/normalMatch";
    });
</script>

<script>
    let shouldPrompt = false;

    if ("{{user._id}}" === $("#Black").attr("data-user_id") || "{{user._id}}" === $("#White").attr("data-user_id")) {
        shouldPrompt = true;
    }

    window.addEventListener('beforeunload', function (event) {
        if (shouldPrompt) {
            event.preventDefault();
            event.returnValue = '';
        }
    });

</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.js" integrity="sha512-oprzqYFJfo4Bx/nNEcSI0xo7ggJrLc+qQ6hrS3zV/Jn0C4dsg4gu+FXW/Vm0jP9CrV7e5e6dcLUYkg3imjfjbw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://unpkg.com/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.js" integrity="sha384-8Vi8VHwn3vjQ9eUHUxex3JSN/NFqUg3QbPyX8kWyb93+8AC/pPWTzj+nHtbC5bxD" crossorigin="anonymous"></script>
<script>
    var board = null;
    var game = new Chess();
    var $status = $("#status");
    var $fen = $("#fen");
    var $pgn = $("#pgn");
    const depth = 15;

    function onDragStart(source, piece, position, orientation) {
        // do not pick up pieces if the game is over
        if (game.game_over()) return false;

        // only pick up pieces for the side to move
        if (piece.search(/^b/) !== -1) {
            return false;
        }
    }

    function onDrop(source, target) {
        // check promotion
        var piece = game.get(source);
        var promotion;
        if (piece.type === "p" && (target[1] === "8" || target[1] === "1")) {
            // ask for promotion piece
            promotion = prompt("Promotion", "q");
            //game.move({ from: source, to: target, promotion: promotion });
        
        }
        // see if the move is legal
        var move = game.move({
            from: source,
            to: target,
            promotion: promotion,
        });

        // illegal move
        if (move === null) return "snapback";


    }

    function onSnapEnd() {
        board.position(game.fen());
    }

    function updateStatus() {
        var status = "";

        var moveColor = "White";
        if (game.turn() === "b") {
            moveColor = "Black";
        }

        // checkmate?
        if (game.in_checkmate()) {
            status = "Game over, " + moveColor + " is in checkmate.";
        }

        // draw?
        else if (game.in_draw()) {
            status = "Game over, drawn position";
        }

        // game still on
        else {
            status = moveColor + " to move";

            // check?
            if (game.in_check()) {
                status += ", " + moveColor + " is in check";
            }
        }

        $status.html(status);
        $fen.html(game.fen());
        $pgn.html(game.pgn());
    }

    var config = {
        draggable: true,
        position: "start",
        onDragStart: onDragStart,
        onDrop: onDrop,
        onSnapEnd: onSnapEnd,
    };
    board = Chessboard("board", config);

</script>