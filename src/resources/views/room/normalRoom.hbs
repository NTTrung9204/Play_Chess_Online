<link rel="stylesheet" href="../css/chessboard-1.0.0.css">
<script src="../js/stockfish6.js"></script>
<style>
    #bar_eval{
    position: relative;
    width: 25px;
    height: 400px;
    background-color: rgb(127, 127, 127);
}

    #bar_fill{
        position: absolute;
        bottom: 0;
        width: 100%;
        height: 50%;
        background-color: #ccc;
        transition: all 0.5s;
    }

    #container_game{
        display: flex;
        justify-content: center;
        align-items: center;
    }
</style>
<p>
    White player: 
    <span id="White" data-user_id="">

    </span>
    <span id="timeWhiteSide">10.00.0</span>
</p>

<p>
    Black player: 
    <span id="Black" data-user_id="">

    </span>
    <span id="timeBlackSide">10.00.0</span>
</p>
<div id="start__game">

</div>
<div id="options__game">

</div>
<div id="container_game">
    <div id="board" style="width: 400px"></div>
    <div id="bar_eval">
        <div id="bar_fill"></div>
    </div>
</div>
<div id="message__room">

</div>


<script src="/socket.io/socket.io.js"></script>

<script>
    const socket = io();
    setTimeout(() => {
        socket.emit("join", "{{room._id}}", "{{user._id}}", "{{user.username}}", "{{room.white_player._id}}", "{{room.black_player._id}}", "{{room.host_room}}");
    }, 100);

    function settingJoin() {
        $(".btn__join").click(function () {
            const player = $(this).data("player");
            socket.emit("join__normal__room", player, "{{room._id}}", "{{user._id}}", socket.id);
        });
    }

    function settingKick() {
        $(".btn__kick").click(function () {
            const user_id = $(this).data("player");
            console.log(user_id);
            socket.emit("kick__normal__room", "{{room._id}}", user_id);
        });
    }

    function settingStart() {
        $("#start__game__btn").click(function () {
            const white_player = $("#White").attr("data-user_id");
            const black_player = $("#Black").attr("data-user_id");
            const time_white_side = $("#timeWhiteSide").text();
            const time_black_side = $("#timeBlackSide").text();
            socket.emit("start__game", "{{room._id}}", white_player, black_player, time_white_side, time_black_side);
        });
    }

    function milliseconds2Time(mls) {
        const minutes = Math.floor(mls / 60000);
        const seconds = Math.floor((mls % 60000) / 1000);
        const milliseconds = Math.floor((mls % 1000) / 100);
        return minutes.toString().padStart(2, "0") + "." + seconds.toString().padStart(2, "0") + "." + milliseconds.toString().padStart(1, "0");
    }

    function time2Milliseconds(t) {
        const time = t.split(".");
        return parseInt(time[0]) * 60 * 1000 + parseInt(time[1]) * 1000 + parseInt(time[2]) * 100;
    }

    function CountdownHandle(side) {
        const time = $("#time" + side + "Side").text();
        countdowntime = time2Milliseconds(time);
        timeinterval = setInterval(() => {
            countdowntime -= 100;
            const newTime = milliseconds2Time(countdowntime);
            $("#time" + side + "Side").text(newTime);
            if (countdowntime <= 0) {
                clearInterval(timeinterval);
                socket.emit("countdownEvent", "{{room._id}}", side);
            }
        }, 100);
    }

    function settingFlip() {
        $("#flipOrientationBtn").click(function () {
            board.flip();
            view_side = view_side === "White" ? "Black" : "White";
        });
    }

    socket.on("join__normal__room", (player, player__name, player_id, host_user_id) => {
        if (player === "White") {
            if(host_user_id === player_id){
                $("#White").html(player__name + " (host)");
            }
            else{
                $("#White").html(player__name);
            }
            $("#White").attr("data-user_id", player_id);
        }
        if (player === "Black") {
            if(host_user_id === player_id){
                $("#Black").html(player__name + " (host)");
            }
            else{
                $("#Black").html(player__name);
            }
            $("#Black").attr("data-user_id", player_id);
        }
    });

    socket.on("user_disconnect", (user_id, user_name, host_room, host_change) => {
        if ($("#White").attr("data-user_id") === user_id) {
            $("#White").html("<button class='btn__join' data-player='White'>join</button>");
            $("#White").attr("data-user_id", "");
            settingJoin()
        }
        if ($("#Black").attr("data-user_id") === user_id) {
            $("#Black").html("<button class='btn__join' data-player='Black'>join</button>");
            $("#Black").attr("data-user_id", "");
            settingJoin()
        }
        if(host_change){
            if(host_room == $("#White").attr("data-user_id")){
                $("#White").html($("#White").html() + " (host)");
            }
            if(host_room == $("#Black").attr("data-user_id")){
                $("#Black").html($("#Black").html() + " (host)");
            }
        }
        $("#message__room").append(`<p style = "text-align: center">${user_name} left room</p>`)
    });

    socket.on("user_connect-io", (user_id, user_name, room, host_room) =>{
        $("#message__room").append(`<p style = "text-align: center">${user_name} joined</p>`)
    })

    socket.on("user_connect-socket", (user_id, user_name, room, host_room, time_white_side_milisecond, time_black_side_milisecond, turn) =>{
        if(room.white_player){
            if(room.white_player._id == host_room){
                $("#White").html(room.white_player.username + " (host)");
                $("#White").attr("data-user_id", room.white_player._id);
            }
            else{
                $("#White").html(room.white_player.username);
                $("#White").attr("data-user_id", room.white_player._id);
            }
        }
        else{
            $("#White").html("<button class='btn__join' data-player='White'>join</button>");
            $("#White").attr("data-user_id", "");
            settingJoin()
        }
        if(room.black_player){
            if(room.black_player._id == host_room){
                $("#Black").html(room.black_player.username + " (host)");
                $("#Black").attr("data-user_id", room.black_player._id);
            }
            else{
                $("#Black").html(room.black_player.username);
                $("#Black").attr("data-user_id", room.black_player._id);
            }
        }
        else{
            $("#Black").html("<button class='btn__join' data-player='Black'>join</button>");
            $("#Black").attr("data-user_id", "");
            settingJoin()
        }
        if(time_black_side_milisecond){
            const time_black_side = milliseconds2Time(time_black_side_milisecond);
            $("#timeBlackSide").text(time_black_side);
        }
        if(time_white_side_milisecond){
            const time_white_side = milliseconds2Time(time_white_side_milisecond);
            $("#timeWhiteSide").text(time_white_side);
        }
        //CountdownHandle(turn);
    })

    socket.on("add_role_of_host", (host_role, host_user_id) => {
        if(host_role){
            if($("#White").attr("data-user_id")){
                if($("#White").attr("data-user_id") != host_user_id){
                    $("#White").append("<button class='btn__kick' data-player='" + $("#White").attr("data-user_id") + "'>kick</button>");
                    $("#start__game").html("<button id='start__game__btn'>start game</button>");
                    settingKick();
                    settingStart();
                }
            }
            if($("#Black").attr("data-user_id")){
                if($("#Black").attr("data-user_id") != host_user_id){
                    $("#Black").append("<button class='btn__kick' data-player='" + $("#Black").attr("data-user_id") + "'>kick</button>");
                    $("#start__game").html("<button id='start__game__btn'>start game</button>");
                    settingKick();
                    settingStart();
                }
            }
        }
    });

    socket.on("closeButtonStart", (host_user_id) => {
        $("#start__game").html("");
    });

    socket.on("start__game", (side_control) => {
        if(side_control === "White"){
            control = "White";
            board.orientation('white')
        }
        if(side_control === "Black"){
            control = "Black";
            board.orientation('black')
        }
        if(side_control === "Viewer"){
            control = "Viewer";
            $("#options__game").html("<button id='flipOrientationBtn'>Flip orientation</button>");
            settingFlip();
        }
        gameStart = true;
    });

    socket.on("countdownEvent", (turn) => {
        CountdownHandle(turn);
    });

    socket.on("kick__normal__room", user_name => {
        window.location.href = "/normalMatch";
    });

    socket.on("new__move", (fen__string, new_turn, milliseconds) => {
        console.log(milliseconds);
        game.load(fen__string);
        board.position(fen__string);
        updateStatus();
        console.log(fen__string);
        try{
            clearInterval(timeinterval);
        }
        catch(e){
            console.log(e);
        }
        window.setTimeout(()=>{
            if(game.in_checkmate() || game.in_draw()) return;
            stockfish.postMessage(`position fen ${game.fen()}`);
            stockfish.postMessage(`go depth ${depth}`);
        }, 50);
        const old_turn = new_turn === "White" ? "Black" : "White";
        const format_time = milliseconds2Time(milliseconds);
        $("#time" + old_turn + "Side").text(format_time);
        CountdownHandle(new_turn);
    });
</script>

<script>
    let shouldPrompt = false;

    if ("{{user._id}}" === $("#Black").attr("data-user_id") || "{{user._id}}" === $("#White").attr("data-user_id")) {
        shouldPrompt = true;
    }

    window.addEventListener('beforeunload', function (event) {
        if (shouldPrompt) {
            event.preventDefault();
            event.returnValue = '';
        }
    });

</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.js" integrity="sha512-oprzqYFJfo4Bx/nNEcSI0xo7ggJrLc+qQ6hrS3zV/Jn0C4dsg4gu+FXW/Vm0jP9CrV7e5e6dcLUYkg3imjfjbw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://unpkg.com/@chrisoakman/chessboardjs@1.0.0/dist/chessboard-1.0.0.min.js" integrity="sha384-8Vi8VHwn3vjQ9eUHUxex3JSN/NFqUg3QbPyX8kWyb93+8AC/pPWTzj+nHtbC5bxD" crossorigin="anonymous"></script>
<script>
    var board = null;
    var game = new Chess();
    var $status = $("#status");
    var $fen = $("#fen");
    var $pgn = $("#pgn");
    const depth = 10;
    var control = "Viewer";
    var view_side = "White";
    var gameStart = false;

    function onDragStart(source, piece, position, orientation) {
        // do not pick up pieces if the game is over
        if (game.game_over()) return false;

        if (control === "Viewer") {
            return false;
        }
        if (control === "White" && gameStart){
            if (piece.search(/^b/) !== -1) return false;
        }
        if (control === "Black" && gameStart){
            if (piece.search(/^w/) !== -1) return false;
        }
    }

    function onDrop(source, target) {
        // check promotion
        var piece = game.get(source);
        var promotion;
        if (piece.type === "p" && (target[1] === "8" || target[1] === "1")) {
            // ask for promotion piece
            promotion = prompt("Promotion", "q");
            //game.move({ from: source, to: target, promotion: promotion });
        
        }
        // see if the move is legal
        var move = game.move({
            from: source,
            to: target,
            promotion: promotion,
        });

        // illegal move
        if (move === null) return "snapback";

        const turn = game.turn() === "w" ? "Black" : "White";
        const countdown_time = $("#time" + turn + "Side").text();
        const countdownTime_milisecond = time2Milliseconds(countdown_time);
        socket.emit("player_move", "{{room._id}}", game.fen(), turn, countdownTime_milisecond);
        try{
            clearInterval(timeinterval);
        }
        catch(e){
            console.log(e);
        }
        window.setTimeout(()=>{
            if(game.in_checkmate() || game.in_draw()) return;
            stockfish.postMessage(`position fen ${game.fen()}`);
            stockfish.postMessage(`go depth ${depth}`);
        }, 50);
    }

    function onSnapEnd() {
        board.position(game.fen());
        
    }

    function updateStatus() {
        var status = "";

        var moveColor = "White";
        if (game.turn() === "b") {
            moveColor = "Black";
        }

        // checkmate?
        if (game.in_checkmate()) {
            status = "Game over, " + moveColor + " is in checkmate.";
        }

        // draw?
        else if (game.in_draw()) {
            status = "Game over, drawn position";
        }

        // game still on
        else {
            status = moveColor + " to move";

            // check?
            if (game.in_check()) {
                status += ", " + moveColor + " is in check";
            }
        }

        $status.html(status);
        $fen.html(game.fen());
        $pgn.html(game.pgn());
    }

    var config = {
        draggable: true,
        position: "start",
        onDragStart: onDragStart,
        onDrop: onDrop,
        onSnapEnd: onSnapEnd,
    };
    board = Chessboard("board", config);

    var stockfish = STOCKFISH();

    stockfish.onmessage = function(event) {
        const message = event.data ? event.data : event;
        console.log(message);
        if (message.startsWith("info depth")) {
            const parts = message.split(' ');
            const evalIndex = parts.indexOf("score") + 2;
            var evaluation = parts[evalIndex];
            const status = parts[evalIndex - 1];
            if (status == "mate"){
                evaluation = evaluation < 0 ? -10000 : 10000;
            }
            if(control === "White" && game.turn() === "w"){
                evaluation = -evaluation;
            }
            if(control === "Black" && game.turn() === "b"){
                evaluation = -evaluation;
            }
            if (control === "Viewer") {
                if (view_side === "Black") {
                    evaluation = -evaluation;
                }
            }
            console.log(evaluation);
            evaluation /= 1000;

            $("#bar_fill").css("height", `${100/(1 + Math.pow(5, 2*evaluation))}%`);
        }
    };
</script>